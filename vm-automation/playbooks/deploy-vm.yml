---
# Dynamic VM Deployment Playbook
# Supports multiple cloud platforms and operating systems

- name: Deploy Virtual Machine on CyberCloud Platform
  hosts: localhost
  gather_facts: false
  vars:
    # Default values - can be overridden
    vm_name: "{{ vm_name | default('auto-vm-' + ansible_date_time.epoch) }}"
    vm_os: "{{ vm_os | default('rhel9') }}"
    vm_cpu: "{{ vm_cpu | default(2) }}"
    vm_memory: "{{ vm_memory | default(4096) }}"
    vm_disk: "{{ vm_disk | default(50) }}"
    vm_network: "{{ vm_network | default('default') }}"
    vm_environment: "{{ vm_environment | default('development') }}"
    
    # Cloud platform settings
    cloud_platform: "{{ cloud_platform | default('vmware') }}"
    datacenter: "{{ datacenter | default('Ceph-Management-Cluster') }}"
    
  tasks:
    - name: Display deployment information
      debug:
        msg:
          - "Deploying VM: {{ vm_name }}"
          - "OS: {{ vm_os }}"
          - "CPU: {{ vm_cpu }} vCPU"
          - "Memory: {{ vm_memory }} MB"
          - "Disk: {{ vm_disk }} GB"
          - "Network: {{ vm_network }}"
          - "Environment: {{ vm_environment }}"
          - "Platform: {{ cloud_platform }}"

    - name: Validate required parameters
      fail:
        msg: "Missing required parameter: {{ item }}"
      when: vars[item] is not defined or vars[item] == ""
      loop:
        - vm_name
        - vm_os
        - cloud_platform

    - name: Load OS-specific variables
      include_vars: "../vars/os-{{ vm_os }}.yml"
      ignore_errors: yes

    - name: Load platform-specific variables
      include_vars: "../vars/platform-{{ cloud_platform }}.yml"
      ignore_errors: yes

    # VM Creation based on platform
    - name: Create VM on VMware platform
      block:
        - name: Deploy VM on VMware vCloud Director
          uri:
            url: "{{ vcloud_api_url }}/api/vApp"
            method: POST
            headers:
              Authorization: "Bearer {{ vcloud_token }}"
              Content-Type: "application/json"
            body_format: json
            body:
              name: "{{ vm_name }}"
              description: "Auto-deployed VM - {{ vm_environment }}"
              template: "{{ os_template_map[vm_os] }}"
              cpu: "{{ vm_cpu }}"
              memory: "{{ vm_memory }}"
              disk: "{{ vm_disk }}"
              network: "{{ vm_network }}"
          register: vm_creation_result
      when: cloud_platform == "vmware"

    - name: Create VM on OpenStack platform
      block:
        - name: Deploy VM on OpenStack
          openstack.cloud.server:
            name: "{{ vm_name }}"
            flavor: "{{ openstack_flavor }}"
            image: "{{ os_image_map[vm_os] }}"
            network: "{{ vm_network }}"
            key_name: "{{ openstack_key_name }}"
            security_groups: "{{ openstack_security_groups }}"
          register: vm_creation_result
      when: cloud_platform == "openstack"

    - name: Wait for VM to be accessible
      wait_for:
        host: "{{ vm_creation_result.server.public_v4 | default(vm_creation_result.server.private_v4) }}"
        port: 22
        delay: 30
        timeout: 300
      when: vm_creation_result is defined

    - name: Add new VM to inventory
      add_host:
        hostname: "{{ vm_name }}"
        ansible_host: "{{ vm_creation_result.server.public_v4 | default(vm_creation_result.server.private_v4) }}"
        groups: "{{ vm_environment }},{{ vm_os }}"

    - name: Display VM access information
      debug:
        msg:
          - "VM {{ vm_name }} deployed successfully!"
          - "IP Address: {{ vm_creation_result.server.public_v4 | default(vm_creation_result.server.private_v4) }}"
          - "SSH: ssh user@{{ vm_creation_result.server.public_v4 | default(vm_creation_result.server.private_v4) }}"

- name: Configure deployed VM
  hosts: "{{ vm_name }}"
  become: yes
  tasks:
    - name: Wait for system to be ready
      wait_for_connection:
        timeout: 300

    - name: Update system packages
      package:
        name: "*"
        state: latest
      when: ansible_os_family == "RedHat"

    - name: Update system packages (Debian)
      apt:
        update_cache: yes
        upgrade: dist
      when: ansible_os_family == "Debian"

    - name: Install basic packages
      package:
        name:
          - vim
          - wget
          - curl
          - git
          - htop
        state: present

    - name: Configure firewall (RHEL/CentOS)
      systemd:
        name: firewalld
        state: started
        enabled: yes
      when: ansible_os_family == "RedHat"

    - name: Configure UFW (Ubuntu)
      ufw:
        state: enabled
        policy: deny
        direction: incoming
      when: ansible_os_family == "Debian"
